#!/usr/bin/python3

import argparse
from datetime import datetime
import datetime as dt
from operator import itemgetter
from pathlib import Path
import subprocess
import sys

parser = argparse.ArgumentParser(description="Run the Tak benchmark")
parser.add_argument(
    "-n", "--input",
    nargs=3, metavar=("X", "Y", "Z"), default=["48", "20", "12"],
    help="The input to the Tak function to use",
)
parser.add_argument(
    "-r", "--runs",
    type=int, default=4,
    help="The number of times to run each implementation",
)
parser.add_argument(
    "-i", "--impl",
    action="append", default=[],
    help="The implementations to run",
)
parser.add_argument(
    "-a", "--all",
    action="store_true",
    help="Run all implementations, including skipped-by-default ones",
)
args = parser.parse_args()

skip_default = [
    "callisto", # Harder to set up, requires building compiler and installing stdlib
    "chicken",  # May require modifying shell script to account for differently named compiler
    "factor",   # May require modifying shell script to account for differently named interpreter
    "uxntal",   # Harder to set up, requires building compiler
]

for impl in args.impl:
    path = Path.cwd() / impl
    if not path.exists():
        sys.exit(f"Implementation {impl} not found")

results = []

for path in Path.cwd().iterdir():
    if not path.is_dir():
        continue

    name = path.name
    build = path / "build.sh"
    run = path / "run.sh"

    if not run.exists(): continue
    # If implementations were explicitly specified, only run those.
    if args.impl and name not in args.impl: continue
    # If -a was not specified, skip trickier implementations
    if not args.impl and not args.all and name in skip_default: continue

    if build.exists():
        print(f"Building {name}")
        result = subprocess.run(
            build,
            cwd=path,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        if result.returncode != 0:
            print(f"Failed to build {name}")
            continue

    print(f"Running {name}")

    total = dt.timedelta()
    ok = True
    for i in range(args.runs):
        start = datetime.now()
        result = subprocess.run(
            [run] + args.input,
            cwd=path,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        if result.returncode != 0:
            print(f"Failed to run {name}")
            ok = False
            break
        end = datetime.now()
        total += end - start
    if not ok:
        continue
    results.append((path.name, total / args.runs))

results.sort(key=itemgetter(1))

for name, time in results:
    trimmed = str(time).split(":", 1)[1]
    print(f"{name:11} | {trimmed}")
