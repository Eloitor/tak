#!/usr/bin/python3

import argparse
from datetime import datetime
import datetime as dt
from operator import itemgetter
from pathlib import Path
import subprocess
import sys

parser = argparse.ArgumentParser(description="Run the Tak benchmark")
parser.add_argument(
    "-n", "--input",
    nargs=3, metavar=("X", "Y", "Z"), default=["48", "20", "12"],
    help="The input to the Tak function to use",
)
parser.add_argument(
    "-r", "--runs",
    type=int, default=4,
    help="The number of times to run each implementation",
)
parser.add_argument(
    "-i", "--impl",
    action="append", default=[],
    help="The implementations to run",
)
parser.add_argument(
    "-a", "--all",
    action="store_true",
    help="Run all implementations, including skipped-by-default ones",
)
args = parser.parse_args()

skip_default = [
    "arturo",    # Takes way too long
    "callisto",  # Requires building compiler and installing stdlib
    "uxntal",    # Requires building assembler and emulator
]

WARNING = "\x1B[33m"
ERROR = "\x1B[31m"
DIM = "\x1B[90m"
RESET = "\x1B[0m"

for impl in args.impl:
    path = Path.cwd() / impl
    if not path.exists():
        sys.exit(f"Implementation {impl} not found")

results = []

for path in Path.cwd().iterdir():
    if not path.is_dir():
        continue

    name = path.name
    version = path / "version.sh"
    build = path / "build.sh"
    run = path / "run.sh"

    if not run.exists():
        continue
    # If implementations were explicitly specified, only run those.
    if args.impl and name not in args.impl:
        continue
    # If -a was not specified, skip trickier implementations
    if not args.impl and not args.all and name in skip_default:
        continue

    print(f"{name}: ", end="", flush=True)

    version_output = "Unknown version"
    if version.exists():
        result = subprocess.run(
            version,
            cwd=path,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
        )
        if result.returncode == 0:
            version_output = result.stdout.decode("utf-8").strip()
        else:
            print(f"\n{WARNING}Warning: Failed to get {name} version{RESET}")
    else:
        print(f"\n{WARNING}Warning: Failed to get {name} version{RESET}")

    if build.exists():
        print("building", end="", flush=True)
        result = subprocess.run(
            build,
            cwd=path,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
        if result.returncode != 0:
            print(f"\n{ERROR}Failed to build {name}{RESET}")
            continue
        print(", ", end="")

    print("running", end="", flush=True)

    total = dt.timedelta()
    ok = True
    for i in range(args.runs):
        start = datetime.now()
        result = subprocess.run(
            [run] + args.input,
            cwd=path,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        if result.returncode != 0:
            print(f"\n{ERROR}Failed to run {name}{RESET}")
            ok = False
            break
        end = datetime.now()
        total += end - start
    if not ok:
        continue
    results.append((path.name, version_output, total / args.runs))

    print()

print("===")

results.sort(key=itemgetter(2))
for name, version, time in results:
    trimmed = str(time).split(":", 1)[1]
    print(f"{name:11} | {trimmed} {DIM}| {version}{RESET}")
